// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lightwalletrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LightWalletServiceClient is the client API for LightWalletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LightWalletServiceClient interface {
	//*
	//GetBestBlock returns the highest block known to lightwallet.
	GetChainInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetChainInfoResponse, error)
	GetBlockHash(ctx context.Context, in *Height, opts ...grpc.CallOption) (*BlockHash, error)
	GetBlock(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockHeader(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*HexEncoded, error)
	GetBlockHeaderVerbose(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*BlockHeader, error)
	GetFilterBlock(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*FilterBlockResponse, error)
	GetBlockFilter(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*BlockFilter, error)
	GetTxOut(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*TxOut, error)
	GetRawTransaction(ctx context.Context, in *TxID, opts ...grpc.CallOption) (*GetRawTransactionResponse, error)
	GetRawTxByIndex(ctx context.Context, in *GetRawTxByIndexRequest, opts ...grpc.CallOption) (*GetRawTxByIndexResponse, error)
	GetLastAddress(ctx context.Context, in *GetLastAddressRequest, opts ...grpc.CallOption) (*GetLastAddressResponse, error)
	ListUtxos(ctx context.Context, in *ListUtxosRequest, opts ...grpc.CallOption) (*ListUtxoResult, error)
	DumpPrivKey(ctx context.Context, in *DumpPrivKeyRequest, opts ...grpc.CallOption) (*HexEncoded, error)
	SendRawTransaction(ctx context.Context, in *HexEncoded, opts ...grpc.CallOption) (*TxID, error)
	GetConfirmedBalance(ctx context.Context, in *GetConfirmedBalanceRequest, opts ...grpc.CallOption) (*GetConfirmedBalanceResponse, error)
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	LoadSecondLayerCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error)
	FreeSecondLayerCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	EstimateNetworkFee(ctx context.Context, in *EstimateNetworkFeeRequest, opts ...grpc.CallOption) (*EstimateNetworkFeeResponse, error)
	LockOutpoint(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*Empty, error)
	UnlockOutpoint(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*Empty, error)
	GetSpendingDetails(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*GetRawTransactionResponse, error)
}

type lightWalletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLightWalletServiceClient(cc grpc.ClientConnInterface) LightWalletServiceClient {
	return &lightWalletServiceClient{cc}
}

func (c *lightWalletServiceClient) GetChainInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetChainInfoResponse, error) {
	out := new(GetChainInfoResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetBlockHash(ctx context.Context, in *Height, opts ...grpc.CallOption) (*BlockHash, error) {
	out := new(BlockHash)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetBlock(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetBlockHeader(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*HexEncoded, error) {
	out := new(HexEncoded)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetBlockHeaderVerbose(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*BlockHeader, error) {
	out := new(BlockHeader)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetBlockHeaderVerbose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetFilterBlock(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*FilterBlockResponse, error) {
	out := new(FilterBlockResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetFilterBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetBlockFilter(ctx context.Context, in *BlockHash, opts ...grpc.CallOption) (*BlockFilter, error) {
	out := new(BlockFilter)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetBlockFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetTxOut(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*TxOut, error) {
	out := new(TxOut)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetTxOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetRawTransaction(ctx context.Context, in *TxID, opts ...grpc.CallOption) (*GetRawTransactionResponse, error) {
	out := new(GetRawTransactionResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetRawTxByIndex(ctx context.Context, in *GetRawTxByIndexRequest, opts ...grpc.CallOption) (*GetRawTxByIndexResponse, error) {
	out := new(GetRawTxByIndexResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetRawTxByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetLastAddress(ctx context.Context, in *GetLastAddressRequest, opts ...grpc.CallOption) (*GetLastAddressResponse, error) {
	out := new(GetLastAddressResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetLastAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) ListUtxos(ctx context.Context, in *ListUtxosRequest, opts ...grpc.CallOption) (*ListUtxoResult, error) {
	out := new(ListUtxoResult)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/ListUtxos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) DumpPrivKey(ctx context.Context, in *DumpPrivKeyRequest, opts ...grpc.CallOption) (*HexEncoded, error) {
	out := new(HexEncoded)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/DumpPrivKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) SendRawTransaction(ctx context.Context, in *HexEncoded, opts ...grpc.CallOption) (*TxID, error) {
	out := new(TxID)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/SendRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetConfirmedBalance(ctx context.Context, in *GetConfirmedBalanceRequest, opts ...grpc.CallOption) (*GetConfirmedBalanceResponse, error) {
	out := new(GetConfirmedBalanceResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetConfirmedBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/Generate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) LoadSecondLayerCache(ctx context.Context, in *LoadCacheRequest, opts ...grpc.CallOption) (*LoadCacheResponse, error) {
	out := new(LoadCacheResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/LoadSecondLayerCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) FreeSecondLayerCache(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/FreeSecondLayerCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) EstimateNetworkFee(ctx context.Context, in *EstimateNetworkFeeRequest, opts ...grpc.CallOption) (*EstimateNetworkFeeResponse, error) {
	out := new(EstimateNetworkFeeResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/EstimateNetworkFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) LockOutpoint(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/LockOutpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) UnlockOutpoint(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/UnlockOutpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lightWalletServiceClient) GetSpendingDetails(ctx context.Context, in *Outpoint, opts ...grpc.CallOption) (*GetRawTransactionResponse, error) {
	out := new(GetRawTransactionResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.LightWalletService/GetSpendingDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LightWalletServiceServer is the server API for LightWalletService service.
// All implementations must embed UnimplementedLightWalletServiceServer
// for forward compatibility
type LightWalletServiceServer interface {
	//*
	//GetBestBlock returns the highest block known to lightwallet.
	GetChainInfo(context.Context, *Empty) (*GetChainInfoResponse, error)
	GetBlockHash(context.Context, *Height) (*BlockHash, error)
	GetBlock(context.Context, *BlockHash) (*GetBlockResponse, error)
	GetBlockHeader(context.Context, *BlockHash) (*HexEncoded, error)
	GetBlockHeaderVerbose(context.Context, *BlockHash) (*BlockHeader, error)
	GetFilterBlock(context.Context, *BlockHash) (*FilterBlockResponse, error)
	GetBlockFilter(context.Context, *BlockHash) (*BlockFilter, error)
	GetTxOut(context.Context, *Outpoint) (*TxOut, error)
	GetRawTransaction(context.Context, *TxID) (*GetRawTransactionResponse, error)
	GetRawTxByIndex(context.Context, *GetRawTxByIndexRequest) (*GetRawTxByIndexResponse, error)
	GetLastAddress(context.Context, *GetLastAddressRequest) (*GetLastAddressResponse, error)
	ListUtxos(context.Context, *ListUtxosRequest) (*ListUtxoResult, error)
	DumpPrivKey(context.Context, *DumpPrivKeyRequest) (*HexEncoded, error)
	SendRawTransaction(context.Context, *HexEncoded) (*TxID, error)
	GetConfirmedBalance(context.Context, *GetConfirmedBalanceRequest) (*GetConfirmedBalanceResponse, error)
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	LoadSecondLayerCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error)
	FreeSecondLayerCache(context.Context, *Empty) (*Empty, error)
	EstimateNetworkFee(context.Context, *EstimateNetworkFeeRequest) (*EstimateNetworkFeeResponse, error)
	LockOutpoint(context.Context, *Outpoint) (*Empty, error)
	UnlockOutpoint(context.Context, *Outpoint) (*Empty, error)
	GetSpendingDetails(context.Context, *Outpoint) (*GetRawTransactionResponse, error)
	mustEmbedUnimplementedLightWalletServiceServer()
}

// UnimplementedLightWalletServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLightWalletServiceServer struct {
}

func (UnimplementedLightWalletServiceServer) GetChainInfo(context.Context, *Empty) (*GetChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainInfo not implemented")
}
func (UnimplementedLightWalletServiceServer) GetBlockHash(context.Context, *Height) (*BlockHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (UnimplementedLightWalletServiceServer) GetBlock(context.Context, *BlockHash) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedLightWalletServiceServer) GetBlockHeader(context.Context, *BlockHash) (*HexEncoded, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeader not implemented")
}
func (UnimplementedLightWalletServiceServer) GetBlockHeaderVerbose(context.Context, *BlockHash) (*BlockHeader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderVerbose not implemented")
}
func (UnimplementedLightWalletServiceServer) GetFilterBlock(context.Context, *BlockHash) (*FilterBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilterBlock not implemented")
}
func (UnimplementedLightWalletServiceServer) GetBlockFilter(context.Context, *BlockHash) (*BlockFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockFilter not implemented")
}
func (UnimplementedLightWalletServiceServer) GetTxOut(context.Context, *Outpoint) (*TxOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxOut not implemented")
}
func (UnimplementedLightWalletServiceServer) GetRawTransaction(context.Context, *TxID) (*GetRawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransaction not implemented")
}
func (UnimplementedLightWalletServiceServer) GetRawTxByIndex(context.Context, *GetRawTxByIndexRequest) (*GetRawTxByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTxByIndex not implemented")
}
func (UnimplementedLightWalletServiceServer) GetLastAddress(context.Context, *GetLastAddressRequest) (*GetLastAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastAddress not implemented")
}
func (UnimplementedLightWalletServiceServer) ListUtxos(context.Context, *ListUtxosRequest) (*ListUtxoResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUtxos not implemented")
}
func (UnimplementedLightWalletServiceServer) DumpPrivKey(context.Context, *DumpPrivKeyRequest) (*HexEncoded, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivKey not implemented")
}
func (UnimplementedLightWalletServiceServer) SendRawTransaction(context.Context, *HexEncoded) (*TxID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (UnimplementedLightWalletServiceServer) GetConfirmedBalance(context.Context, *GetConfirmedBalanceRequest) (*GetConfirmedBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmedBalance not implemented")
}
func (UnimplementedLightWalletServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedLightWalletServiceServer) LoadSecondLayerCache(context.Context, *LoadCacheRequest) (*LoadCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadSecondLayerCache not implemented")
}
func (UnimplementedLightWalletServiceServer) FreeSecondLayerCache(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeSecondLayerCache not implemented")
}
func (UnimplementedLightWalletServiceServer) EstimateNetworkFee(context.Context, *EstimateNetworkFeeRequest) (*EstimateNetworkFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateNetworkFee not implemented")
}
func (UnimplementedLightWalletServiceServer) LockOutpoint(context.Context, *Outpoint) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockOutpoint not implemented")
}
func (UnimplementedLightWalletServiceServer) UnlockOutpoint(context.Context, *Outpoint) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockOutpoint not implemented")
}
func (UnimplementedLightWalletServiceServer) GetSpendingDetails(context.Context, *Outpoint) (*GetRawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendingDetails not implemented")
}
func (UnimplementedLightWalletServiceServer) mustEmbedUnimplementedLightWalletServiceServer() {}

// UnsafeLightWalletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LightWalletServiceServer will
// result in compilation errors.
type UnsafeLightWalletServiceServer interface {
	mustEmbedUnimplementedLightWalletServiceServer()
}

func RegisterLightWalletServiceServer(s grpc.ServiceRegistrar, srv LightWalletServiceServer) {
	s.RegisterService(&LightWalletService_ServiceDesc, srv)
}

func _LightWalletService_GetChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetChainInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Height)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetBlockHash(ctx, req.(*Height))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetBlock(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetBlockHeader(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetBlockHeaderVerbose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetBlockHeaderVerbose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetBlockHeaderVerbose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetBlockHeaderVerbose(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetFilterBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetFilterBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetFilterBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetFilterBlock(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetBlockFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetBlockFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetBlockFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetBlockFilter(ctx, req.(*BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetTxOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Outpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetTxOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetTxOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetTxOut(ctx, req.(*Outpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetRawTransaction(ctx, req.(*TxID))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetRawTxByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTxByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetRawTxByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetRawTxByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetRawTxByIndex(ctx, req.(*GetRawTxByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetLastAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetLastAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetLastAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetLastAddress(ctx, req.(*GetLastAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_ListUtxos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUtxosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).ListUtxos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/ListUtxos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).ListUtxos(ctx, req.(*ListUtxosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_DumpPrivKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpPrivKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).DumpPrivKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/DumpPrivKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).DumpPrivKey(ctx, req.(*DumpPrivKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexEncoded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).SendRawTransaction(ctx, req.(*HexEncoded))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetConfirmedBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfirmedBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetConfirmedBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetConfirmedBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetConfirmedBalance(ctx, req.(*GetConfirmedBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/Generate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_LoadSecondLayerCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).LoadSecondLayerCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/LoadSecondLayerCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).LoadSecondLayerCache(ctx, req.(*LoadCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_FreeSecondLayerCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).FreeSecondLayerCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/FreeSecondLayerCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).FreeSecondLayerCache(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_EstimateNetworkFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateNetworkFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).EstimateNetworkFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/EstimateNetworkFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).EstimateNetworkFee(ctx, req.(*EstimateNetworkFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_LockOutpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Outpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).LockOutpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/LockOutpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).LockOutpoint(ctx, req.(*Outpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_UnlockOutpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Outpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).UnlockOutpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/UnlockOutpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).UnlockOutpoint(ctx, req.(*Outpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _LightWalletService_GetSpendingDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Outpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LightWalletServiceServer).GetSpendingDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.LightWalletService/GetSpendingDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LightWalletServiceServer).GetSpendingDetails(ctx, req.(*Outpoint))
	}
	return interceptor(ctx, in, info, handler)
}

// LightWalletService_ServiceDesc is the grpc.ServiceDesc for LightWalletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LightWalletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightwalletrpc.LightWalletService",
	HandlerType: (*LightWalletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChainInfo",
			Handler:    _LightWalletService_GetChainInfo_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _LightWalletService_GetBlockHash_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _LightWalletService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockHeader",
			Handler:    _LightWalletService_GetBlockHeader_Handler,
		},
		{
			MethodName: "GetBlockHeaderVerbose",
			Handler:    _LightWalletService_GetBlockHeaderVerbose_Handler,
		},
		{
			MethodName: "GetFilterBlock",
			Handler:    _LightWalletService_GetFilterBlock_Handler,
		},
		{
			MethodName: "GetBlockFilter",
			Handler:    _LightWalletService_GetBlockFilter_Handler,
		},
		{
			MethodName: "GetTxOut",
			Handler:    _LightWalletService_GetTxOut_Handler,
		},
		{
			MethodName: "GetRawTransaction",
			Handler:    _LightWalletService_GetRawTransaction_Handler,
		},
		{
			MethodName: "GetRawTxByIndex",
			Handler:    _LightWalletService_GetRawTxByIndex_Handler,
		},
		{
			MethodName: "GetLastAddress",
			Handler:    _LightWalletService_GetLastAddress_Handler,
		},
		{
			MethodName: "ListUtxos",
			Handler:    _LightWalletService_ListUtxos_Handler,
		},
		{
			MethodName: "DumpPrivKey",
			Handler:    _LightWalletService_DumpPrivKey_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _LightWalletService_SendRawTransaction_Handler,
		},
		{
			MethodName: "GetConfirmedBalance",
			Handler:    _LightWalletService_GetConfirmedBalance_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _LightWalletService_Generate_Handler,
		},
		{
			MethodName: "LoadSecondLayerCache",
			Handler:    _LightWalletService_LoadSecondLayerCache_Handler,
		},
		{
			MethodName: "FreeSecondLayerCache",
			Handler:    _LightWalletService_FreeSecondLayerCache_Handler,
		},
		{
			MethodName: "EstimateNetworkFee",
			Handler:    _LightWalletService_EstimateNetworkFee_Handler,
		},
		{
			MethodName: "LockOutpoint",
			Handler:    _LightWalletService_LockOutpoint_Handler,
		},
		{
			MethodName: "UnlockOutpoint",
			Handler:    _LightWalletService_UnlockOutpoint_Handler,
		},
		{
			MethodName: "GetSpendingDetails",
			Handler:    _LightWalletService_GetSpendingDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "LightWalletService.proto",
}
