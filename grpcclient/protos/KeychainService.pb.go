// Code generated by protoc-gen-go. DO NOT EDIT.
// source: KeychainService.proto

package lightwalletrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type KeyLocator struct {
	/// The family of key being identified.
	KeyFamily uint32 `protobuf:"varint,1,opt,name=keyFamily,proto3" json:"keyFamily,omitempty"`
	/// The precise index of the key being identified.
	KeyIndex             uint32   `protobuf:"varint,2,opt,name=keyIndex,proto3" json:"keyIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyLocator) Reset()         { *m = KeyLocator{} }
func (m *KeyLocator) String() string { return proto.CompactTextString(m) }
func (*KeyLocator) ProtoMessage()    {}
func (*KeyLocator) Descriptor() ([]byte, []int) {
	return fileDescriptor_80191aa32f34d0da, []int{0}
}

func (m *KeyLocator) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyLocator.Unmarshal(m, b)
}
func (m *KeyLocator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyLocator.Marshal(b, m, deterministic)
}
func (m *KeyLocator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyLocator.Merge(m, src)
}
func (m *KeyLocator) XXX_Size() int {
	return xxx_messageInfo_KeyLocator.Size(m)
}
func (m *KeyLocator) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyLocator.DiscardUnknown(m)
}

var xxx_messageInfo_KeyLocator proto.InternalMessageInfo

func (m *KeyLocator) GetKeyFamily() uint32 {
	if m != nil {
		return m.KeyFamily
	}
	return 0
}

func (m *KeyLocator) GetKeyIndex() uint32 {
	if m != nil {
		return m.KeyIndex
	}
	return 0
}

type KeyDescriptor struct {
	//*
	//The raw bytes of the key being identified. Encoded as Hex. Either this or the KeyLocator
	//must be specified.
	PubKey string `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	//*
	//The key locator that identifies which key to use for signing. Either this
	//or the raw bytes of the target key must be specified.
	Locator              *KeyLocator `protobuf:"bytes,2,opt,name=locator,proto3" json:"locator,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *KeyDescriptor) Reset()         { *m = KeyDescriptor{} }
func (m *KeyDescriptor) String() string { return proto.CompactTextString(m) }
func (*KeyDescriptor) ProtoMessage()    {}
func (*KeyDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_80191aa32f34d0da, []int{1}
}

func (m *KeyDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyDescriptor.Unmarshal(m, b)
}
func (m *KeyDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyDescriptor.Marshal(b, m, deterministic)
}
func (m *KeyDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDescriptor.Merge(m, src)
}
func (m *KeyDescriptor) XXX_Size() int {
	return xxx_messageInfo_KeyDescriptor.Size(m)
}
func (m *KeyDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDescriptor proto.InternalMessageInfo

func (m *KeyDescriptor) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *KeyDescriptor) GetLocator() *KeyLocator {
	if m != nil {
		return m.Locator
	}
	return nil
}

type DeriveNextKeyReq struct {
	KeyFamily            uint32   `protobuf:"varint,1,opt,name=keyFamily,proto3" json:"keyFamily,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeriveNextKeyReq) Reset()         { *m = DeriveNextKeyReq{} }
func (m *DeriveNextKeyReq) String() string { return proto.CompactTextString(m) }
func (*DeriveNextKeyReq) ProtoMessage()    {}
func (*DeriveNextKeyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_80191aa32f34d0da, []int{2}
}

func (m *DeriveNextKeyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeriveNextKeyReq.Unmarshal(m, b)
}
func (m *DeriveNextKeyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeriveNextKeyReq.Marshal(b, m, deterministic)
}
func (m *DeriveNextKeyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveNextKeyReq.Merge(m, src)
}
func (m *DeriveNextKeyReq) XXX_Size() int {
	return xxx_messageInfo_DeriveNextKeyReq.Size(m)
}
func (m *DeriveNextKeyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveNextKeyReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveNextKeyReq proto.InternalMessageInfo

func (m *DeriveNextKeyReq) GetKeyFamily() uint32 {
	if m != nil {
		return m.KeyFamily
	}
	return 0
}

func init() {
	proto.RegisterType((*KeyLocator)(nil), "lightwalletrpc.KeyLocator")
	proto.RegisterType((*KeyDescriptor)(nil), "lightwalletrpc.KeyDescriptor")
	proto.RegisterType((*DeriveNextKeyReq)(nil), "lightwalletrpc.DeriveNextKeyReq")
}

func init() { proto.RegisterFile("KeychainService.proto", fileDescriptor_80191aa32f34d0da) }

var fileDescriptor_80191aa32f34d0da = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xa9, 0x87, 0x69, 0x9f, 0x56, 0x25, 0xa0, 0x8c, 0xa0, 0x30, 0x7a, 0xf2, 0x54, 0x64,
	0xfa, 0x0d, 0x9c, 0x45, 0x8d, 0xc8, 0xa8, 0x67, 0x0f, 0x5d, 0xfa, 0x70, 0x61, 0x69, 0x53, 0x63,
	0xac, 0xcd, 0x27, 0xf7, 0x2a, 0x6d, 0x9c, 0xb3, 0x55, 0xea, 0xf1, 0xe5, 0xbd, 0xfc, 0xfe, 0xbf,
	0x97, 0xc0, 0x11, 0x43, 0xcb, 0x97, 0xa9, 0x28, 0x1e, 0x51, 0x57, 0x82, 0x63, 0x54, 0x6a, 0x65,
	0x14, 0xd9, 0x97, 0xe2, 0x79, 0x69, 0xde, 0x53, 0x29, 0xd1, 0xe8, 0x92, 0xd3, 0xbd, 0x2b, 0x95,
	0xe7, 0xaa, 0x70, 0xdd, 0x30, 0x06, 0x60, 0x68, 0xef, 0x15, 0x4f, 0x8d, 0xd2, 0xe4, 0x04, 0xfc,
	0x15, 0xda, 0x38, 0xcd, 0x85, 0xb4, 0x63, 0x6f, 0xe2, 0x9d, 0x05, 0xc9, 0xe6, 0x80, 0x50, 0xd8,
	0x59, 0xa1, 0xbd, 0x2d, 0x32, 0xac, 0xc7, 0x5b, 0x6d, 0xf3, 0xbb, 0x0e, 0x9f, 0x20, 0x60, 0x68,
	0x67, 0xf8, 0xca, 0xb5, 0x28, 0x1b, 0xd4, 0x31, 0x8c, 0xca, 0xb7, 0x05, 0x43, 0xc7, 0xf1, 0x93,
	0xaf, 0x8a, 0x5c, 0xc2, 0xb6, 0x74, 0x69, 0x2d, 0x63, 0x77, 0x4a, 0xa3, 0xae, 0x60, 0xb4, 0xf1,
	0x49, 0xd6, 0xa3, 0xe1, 0x39, 0x1c, 0xce, 0x50, 0x8b, 0x0a, 0x1f, 0xb0, 0x36, 0x0c, 0x6d, 0x82,
	0x2f, 0xc3, 0xb2, 0xd3, 0x0f, 0x0f, 0x0e, 0x7a, 0x0f, 0x42, 0xe6, 0x10, 0x74, 0x28, 0x64, 0xd2,
	0xcf, 0xee, 0x87, 0xd0, 0xd3, 0x3f, 0xec, 0x7e, 0x6c, 0x19, 0x83, 0xef, 0xae, 0x34, 0xb4, 0x81,
	0x4d, 0xfe, 0xe3, 0xdc, 0xad, 0xcd, 0xe6, 0x5a, 0x54, 0x0d, 0x6b, 0x78, 0x9e, 0xfe, 0x8a, 0xba,
	0xc1, 0xfa, 0xba, 0xe0, 0x2a, 0xc3, 0x6c, 0x31, 0x6a, 0x7f, 0xf6, 0xe2, 0x33, 0x00, 0x00, 0xff,
	0xff, 0xa4, 0xdc, 0xba, 0x88, 0x10, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeychainServiceClient is the client API for KeychainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeychainServiceClient interface {
	DeriveNextKey(ctx context.Context, in *DeriveNextKeyReq, opts ...grpc.CallOption) (*KeyDescriptor, error)
	DeriveKey(ctx context.Context, in *KeyLocator, opts ...grpc.CallOption) (*KeyDescriptor, error)
	DerivePrivKey(ctx context.Context, in *KeyDescriptor, opts ...grpc.CallOption) (*HexEncoded, error)
}

type keychainServiceClient struct {
	cc *grpc.ClientConn
}

func NewKeychainServiceClient(cc *grpc.ClientConn) KeychainServiceClient {
	return &keychainServiceClient{cc}
}

func (c *keychainServiceClient) DeriveNextKey(ctx context.Context, in *DeriveNextKeyReq, opts ...grpc.CallOption) (*KeyDescriptor, error) {
	out := new(KeyDescriptor)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/DeriveNextKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keychainServiceClient) DeriveKey(ctx context.Context, in *KeyLocator, opts ...grpc.CallOption) (*KeyDescriptor, error) {
	out := new(KeyDescriptor)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/DeriveKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keychainServiceClient) DerivePrivKey(ctx context.Context, in *KeyDescriptor, opts ...grpc.CallOption) (*HexEncoded, error) {
	out := new(HexEncoded)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/DerivePrivKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeychainServiceServer is the server API for KeychainService service.
type KeychainServiceServer interface {
	DeriveNextKey(context.Context, *DeriveNextKeyReq) (*KeyDescriptor, error)
	DeriveKey(context.Context, *KeyLocator) (*KeyDescriptor, error)
	DerivePrivKey(context.Context, *KeyDescriptor) (*HexEncoded, error)
}

// UnimplementedKeychainServiceServer can be embedded to have forward compatible implementations.
type UnimplementedKeychainServiceServer struct {
}

func (*UnimplementedKeychainServiceServer) DeriveNextKey(ctx context.Context, req *DeriveNextKeyReq) (*KeyDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveNextKey not implemented")
}
func (*UnimplementedKeychainServiceServer) DeriveKey(ctx context.Context, req *KeyLocator) (*KeyDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveKey not implemented")
}
func (*UnimplementedKeychainServiceServer) DerivePrivKey(ctx context.Context, req *KeyDescriptor) (*HexEncoded, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivePrivKey not implemented")
}

func RegisterKeychainServiceServer(s *grpc.Server, srv KeychainServiceServer) {
	s.RegisterService(&_KeychainService_serviceDesc, srv)
}

func _KeychainService_DeriveNextKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveNextKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).DeriveNextKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/DeriveNextKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).DeriveNextKey(ctx, req.(*DeriveNextKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeychainService_DeriveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyLocator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).DeriveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/DeriveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).DeriveKey(ctx, req.(*KeyLocator))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeychainService_DerivePrivKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).DerivePrivKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/DerivePrivKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).DerivePrivKey(ctx, req.(*KeyDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeychainService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lightwalletrpc.KeychainService",
	HandlerType: (*KeychainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveNextKey",
			Handler:    _KeychainService_DeriveNextKey_Handler,
		},
		{
			MethodName: "DeriveKey",
			Handler:    _KeychainService_DeriveKey_Handler,
		},
		{
			MethodName: "DerivePrivKey",
			Handler:    _KeychainService_DerivePrivKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "KeychainService.proto",
}
