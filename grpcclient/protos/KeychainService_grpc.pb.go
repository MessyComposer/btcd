// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lightwalletrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeychainServiceClient is the client API for KeychainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeychainServiceClient interface {
	DeriveNextKey(ctx context.Context, in *DeriveNextKeyReq, opts ...grpc.CallOption) (*KeyDescriptor, error)
	DeriveKey(ctx context.Context, in *KeyLocator, opts ...grpc.CallOption) (*KeyDescriptor, error)
	DerivePrivKey(ctx context.Context, in *KeyDescriptor, opts ...grpc.CallOption) (*HexEncoded, error)
	IsOurAddress(ctx context.Context, in *HexEncoded, opts ...grpc.CallOption) (*IsOurAddressResponse, error)
}

type keychainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeychainServiceClient(cc grpc.ClientConnInterface) KeychainServiceClient {
	return &keychainServiceClient{cc}
}

func (c *keychainServiceClient) DeriveNextKey(ctx context.Context, in *DeriveNextKeyReq, opts ...grpc.CallOption) (*KeyDescriptor, error) {
	out := new(KeyDescriptor)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/DeriveNextKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keychainServiceClient) DeriveKey(ctx context.Context, in *KeyLocator, opts ...grpc.CallOption) (*KeyDescriptor, error) {
	out := new(KeyDescriptor)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/DeriveKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keychainServiceClient) DerivePrivKey(ctx context.Context, in *KeyDescriptor, opts ...grpc.CallOption) (*HexEncoded, error) {
	out := new(HexEncoded)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/DerivePrivKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keychainServiceClient) IsOurAddress(ctx context.Context, in *HexEncoded, opts ...grpc.CallOption) (*IsOurAddressResponse, error) {
	out := new(IsOurAddressResponse)
	err := c.cc.Invoke(ctx, "/lightwalletrpc.KeychainService/IsOurAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeychainServiceServer is the server API for KeychainService service.
// All implementations must embed UnimplementedKeychainServiceServer
// for forward compatibility
type KeychainServiceServer interface {
	DeriveNextKey(context.Context, *DeriveNextKeyReq) (*KeyDescriptor, error)
	DeriveKey(context.Context, *KeyLocator) (*KeyDescriptor, error)
	DerivePrivKey(context.Context, *KeyDescriptor) (*HexEncoded, error)
	IsOurAddress(context.Context, *HexEncoded) (*IsOurAddressResponse, error)
	mustEmbedUnimplementedKeychainServiceServer()
}

// UnimplementedKeychainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeychainServiceServer struct {
}

func (UnimplementedKeychainServiceServer) DeriveNextKey(context.Context, *DeriveNextKeyReq) (*KeyDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveNextKey not implemented")
}
func (UnimplementedKeychainServiceServer) DeriveKey(context.Context, *KeyLocator) (*KeyDescriptor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveKey not implemented")
}
func (UnimplementedKeychainServiceServer) DerivePrivKey(context.Context, *KeyDescriptor) (*HexEncoded, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DerivePrivKey not implemented")
}
func (UnimplementedKeychainServiceServer) IsOurAddress(context.Context, *HexEncoded) (*IsOurAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOurAddress not implemented")
}
func (UnimplementedKeychainServiceServer) mustEmbedUnimplementedKeychainServiceServer() {}

// UnsafeKeychainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeychainServiceServer will
// result in compilation errors.
type UnsafeKeychainServiceServer interface {
	mustEmbedUnimplementedKeychainServiceServer()
}

func RegisterKeychainServiceServer(s grpc.ServiceRegistrar, srv KeychainServiceServer) {
	s.RegisterService(&KeychainService_ServiceDesc, srv)
}

func _KeychainService_DeriveNextKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveNextKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).DeriveNextKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/DeriveNextKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).DeriveNextKey(ctx, req.(*DeriveNextKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeychainService_DeriveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyLocator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).DeriveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/DeriveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).DeriveKey(ctx, req.(*KeyLocator))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeychainService_DerivePrivKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyDescriptor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).DerivePrivKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/DerivePrivKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).DerivePrivKey(ctx, req.(*KeyDescriptor))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeychainService_IsOurAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HexEncoded)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeychainServiceServer).IsOurAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lightwalletrpc.KeychainService/IsOurAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeychainServiceServer).IsOurAddress(ctx, req.(*HexEncoded))
	}
	return interceptor(ctx, in, info, handler)
}

// KeychainService_ServiceDesc is the grpc.ServiceDesc for KeychainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeychainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lightwalletrpc.KeychainService",
	HandlerType: (*KeychainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveNextKey",
			Handler:    _KeychainService_DeriveNextKey_Handler,
		},
		{
			MethodName: "DeriveKey",
			Handler:    _KeychainService_DeriveKey_Handler,
		},
		{
			MethodName: "DerivePrivKey",
			Handler:    _KeychainService_DerivePrivKey_Handler,
		},
		{
			MethodName: "IsOurAddress",
			Handler:    _KeychainService_IsOurAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "KeychainService.proto",
}
